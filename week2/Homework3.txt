☆アイデア: データを検索・追加・削除するためのハッシュテーブルと、アクセスした順番を管理する配列の2つを持つキャッシュクラスを作る

〇ハッシュテーブル
　・宿題1のものを利用
　・一部今回のキャッシュクラスの仕様に合わせて加筆

〇配列
・長さがキャッシュサイズの配列
・要素: url (ハッシュテーブルにとってのkey)
・キャッシュクラスが最後に更新した配列のindexを保持しておく
　→すでにキャッシュされているページにアクセスしたら、配列内での順序を入れ替える
　→キャッシュが存在しない場合、indexのページを入れ替える

〇問題に対して
・与えられた <URL, Web ページ> があるかないかを検索
　→ハッシュテーブルでの検索なので、宿題1よりほぼO(1)で可能
・もしない場合、キャッシュ内で一番古い <URL, Web ページ> を捨てて、かわりに与えられた <URL, Web ページ> を追加する
　→一番古いページがどれかは配列とindexを見ればO(1)で分かる
　→配列内での順序の入れ替えのみ、最悪の場合O(n) (n=配列の長さ) かかってしまう。今後の課題。
